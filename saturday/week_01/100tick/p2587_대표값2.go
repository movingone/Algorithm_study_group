// =======================================
//
// p2587 [대표값2]
//
// [문제]
// 어떤 수들이 있을 때, 그 수들을 대표하는 값으로 가장 흔하게 쓰이는 것은 평균이다.
// 평균은 주어진 모든 수의 합을 수의 개수로 나눈 것이다.
// 예를 들어 10, 40, 30, 60, 30의 평균은
// (10 + 40 + 30 + 60 + 30) / 5 = 170 / 5 = 34가 된다.
// 평균 이외의 또 다른 대표값으로 중앙값이라는 것이 있다.
// 중앙값은 주어진 수를 크기 순서대로 늘어 놓았을 때 가장 중앙에 놓인 값이다.
// 예를 들어 10, 40, 30, 60, 30의 경우, 크기 순서대로 늘어 놓으면
// 10 30 30 40 60이 되고 따라서 중앙값은 30이 된다.
// 다섯 개의 자연수가 주어질 때 이들의 평균과 중앙값을 구하는 프로그램을 작성하시오.
//
// [입력]
// 첫째 줄부터 다섯 번째 줄까지 한 줄에 하나씩 자연수가 주어진다.
// 주어지는 자연수는 100 보다 작은 10의 배수이다.
//
// [출력]
// 첫째 줄에는 평균을 출력하고, 둘째 줄에는 중앙값을 출력한다.
// 평균과 중앙값은 모두 자연수이다.
//
// [https://www.acmicpc.net/problem/2587]
//
// =======================================
// IMPORT
// =======================================
package main

import (
	"bufio"
	"fmt"
	"os"
	"sort"
)

func main() {
	// =======================================
	// FOR FAST INPUT/OUTPUT
	// =======================================
	r := bufio.NewReader(os.Stdin)
	w := bufio.NewWriter(os.Stdout)
	defer w.Flush()

	// =======================================
	// INPUT
	// =======================================
	// N개의 요소를 갖는 int Slice(동적 배열), nums 생성
	nums := make([]int, 5)
	// Fscanf로 입력을 받아 nums[i]에 저장
	for i := 0; i < 5; i++ {
		fmt.Fscanln(r, &nums[i])
	}

	// go에서의 기본 오름차순 정렬
	// =======================================
	// SORT
	// =======================================
	// Go의 Slice는 C++, Java의 vector와 비슷한 동적 배열
	// 한 번 생성되면 Size 변경이 불가능한 Array와 달리
	// 새로운 element가 append(=add = push = emplace)되면,
	// length, capacity를 자동으로 늘려줌
	sort.Ints(nums) // 숫자 Slice 오름차순 정렬
	//
	// 평균
	//
	// 아래에 직접 만든 Sum() 함수로 Slice의 모든 요소의 합을 구한 뒤,
	// length만큼 나눠서 평균 구해줌
	// Python과 달리 Go에서 int끼리의 나눗셈은 소숫점 아래를 버림
	// Python의 a // b는
	// Go에서의 a / b와 같음
	avg := Sum(nums) / len(nums)
	//
	//
	// 중앙값
	median := nums[len(nums)/2]
	//
	//
	// =======================================
	// OUTPUT
	// =======================================
	// Go의 range는 Python과 다름
	// go에서의 range는 Slice를 받아 반복문에서 index, value를 함께 제공해주지만
	// Python에서의 range는 숫자를 받아, 해당 범위로 구성된 리스트 생성해줌
	fmt.Fprintln(w, avg)
	fmt.Fprintln(w, median)
}

func Sum(nums []int) int {
	var sum int

	for _, n := range nums {
		sum += n
	}
	return sum
}
