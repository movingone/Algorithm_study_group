// =======================================
//
// p1427 [소트 인사이드]
//
// [문제]
// 배열을 정렬하는 것은 쉽다.
// 수가 주어지면, 그 수의 각 자리수를 내림차순으로 정렬해보자.
//
// [입력]
// 첫째 줄에 정렬하려고 하는 수 N이 주어진다.
// N은 1,000,000,000보다 작거나 같은 자연수이다.
//
// [출력]
// 첫째 줄에 자리수를 내림차순으로 정렬한 수를 출력한다.
//
// [https://www.acmicpc.net/problem/1427]
//
// =======================================
// IMPORT
// =======================================
package main

import (
	"bufio"
	"fmt"
	"os"
	"sort"
	"strings"
)

func main() {
	// =======================================
	// FOR FAST IO READER/WRITER
	// =======================================
	r := bufio.NewReader(os.Stdin)
	w := bufio.NewWriter(os.Stdout)
	defer w.Flush()

	// =======================================
	// INPUT
	// =======================================
	// 입력 받을 수, N
	var N int
	fmt.Fscanln(r, &N)

	// N개의 string을 nums에 저장
	nums := []string{}

	// 타 언어에서의 while (N > 0)과 같다
	for N > 0 {
		// unit은 수의 1의 자리를 저장
		// 123456 -> 6
		// 12345 -> 5
		// 1234 -> 4
		// 123 -> 3
		// 12 -> 2
		// 1 -> 1
		// 0
		// 위와 같이 수의 1의 자리를 추출하여 unit에 저장하고
		// 마지막에 N을 10으로 나눠주면 마지막 한 자리씩 제거되어
		// 모든 자리의 수를 추출할 수 있다.
		// 모든 수를 추출한 후에는 0이 되어 for문이 종료된다.
		unit := N % 10
		nums = append(nums, fmt.Sprintf("%d", unit))
		N = N / 10
	}

	// =======================================
	// SORT
	// =======================================
	// nums int Slice를 내림차순으로 정렬
	//
	// sort 패키지의 Slice 함수를 이용하여
	// []int(int Slice)를 정렬할 수 있다.
	// 2번째 인자로 comparer이 콜백 함수로 전달된다.
	sort.Slice(nums, func(i, j int) bool {
		// 오름차순 정렬
		return nums[i] > nums[j]
	})

	// =======================================
	// OUTPUT
	// =======================================
	fmt.Fprintln(w, strings.Join(nums, ""))

}
