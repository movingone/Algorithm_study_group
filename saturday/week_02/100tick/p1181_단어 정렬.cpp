// ============================================
// PROBLEM INFO
// ============================================
//
// 백준 p1181 [단어 정렬]
// 알파벳 소문자로 이루어진 N개의 단어가 들어오면
// 아래와 같은 조건에 따라 정렬하는 프로그램을 작성하시오.
//
// 길이가 짧은 것부터
// 길이가 같으면 사전 순으로
//
// https://www.acmicpc.net/problem/1181
//
// ============================================
// IMPORT LIBRARY, HEADERS
// ============================================
#include <iostream>
#include <vector>
#include <string>
#include <set>
using namespace std;
// ============================================
// FUNC SIGNATURES
// ============================================
struct SetOrder
{
	bool operator()(const string &left, const string &right) const
	{

		// 1. 문자열 길이가 같은 경우
		// 사전 순으로 정렬
		if (left.length() == right.length())
		{

			return left < right;
		}
		// 2. 문자열 길이가 짧은 순서대로 정렬
		return left.length() < right.length();
	}
};

int main()
{
	// ============================================
	// [FAST INPUT, OUTPUT]
	// 편의를 위해 필요 없는 문제에도 일괄적으로 적용
	// ============================================
	ios_base::sync_with_stdio(false);
	cin.tie(NULL);
	cout.tie(NULL);
	//
	//
	//
	// ============================================
	// [INPUT]
	// 1 <= N <= 20,000
	// ============================================
	int N;
	cin >> N;
	//
	//
	//
	// ============================================
	// [VECTOR INPUT]
	// 길이 50 이하,
	// 알파벳 소문자로 이루어진 단어 N개 저장
	//
	// -> size N인 vector<string> 생성
	// ============================================
	vector<string> V(N);
	for (int i = 0; i < N; i++)
	{
		cin >> V[i];
	}
	//
	//
	//
	// ============================================
	// [SET]
	// 같은 문자열을 여러 번 입력 받은 경우
	// 한 번만 출력하라는 조건이 있기 때문에
	// vector를 기반으로 set 생성
	// set은 중복된 요소가 있는 경우 1개만 저장함
	//
	// SetOrder은 main() 위에 직접 선언한 구조체
	// set이 생성될 때 정렬할 operator를 overloading 하여
	// 문자열의 길이가 짧은 순으로,
	// 문자열의 길이가 같은 경우, 사전 순으로 정렬하는 로직으로 작성
	// ============================================
	set<string, SetOrder> s(V.begin(), V.end());
	//
	//
	//
	// ============================================
	// [PRINT]
	// ============================================
	for (string str : s)
	{
		cout << str << '\n';
	}

	return 0;
}
