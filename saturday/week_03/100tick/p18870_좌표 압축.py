##########################################
#
# p18870 [좌표 압축]
#
# [문제]
# 수직선 위에 N개의 좌표 X1, X2, ..., XN이 있다.
# 이 좌표에 좌표 압축을 적용하려고 한다.
# Xi를 좌표 압축한 결과 X'i의 값은 Xi > Xj를 만족하는 서로 다른 좌표의 개수와 같아야 한다.
# X1, X2, ..., XN에 좌표 압축을 적용한 결과 X'1, X'2, ..., X'N를 출력해보자.
#
# [입력]
# 첫째 줄에 N이 주어진다.
# 둘째 줄에는 공백 한 칸으로 구분된 X1, X2, ..., XN이 주어진다.
#
# [출력]
# 첫째 줄에 X'1, X'2, ..., X'N을 공백 한 칸으로 구분해서 출력한다.
#
# [제한]
# 1 ≤ N ≤ 1,000,000
# -109 ≤ Xi ≤ 109
#
# [https://www.acmicpc.net/problem/18870]
#
#
##########################################
# IMPORT
##########################################
from typing import List, Dict, Tuple
import sys
input = sys.stdin.readline
##########################################
# INPUT
##########################################
#
# X의 개수, N
#
N = int(input())
#
# N개의 좌표를 입력 받음
#
points = list(map(int, input().split()))
#
# 필요한 것
# 1. 원본 List
# 2. 중복 제거된 오름차순 정렬 List
# 3. 2번 List에서 각 숫자의 순위(작은 순)를 저장한 map
#
# 1 ~ 3을 구한 후, 원본 List를 순회하면서
# 각 index에 저장된 숫자의 순위를 map에서 조회하여 출력하면 될듯
#
##########################################
# MAIN LOGIC
##########################################
#
# 1. 원본 List는 이미 생성됨
#
# 2. 중복 제거된 오름차순 정렬 List, points2 생성
#
points2 = sorted(list(set(points)))
#
# 3. points2를 기반으로 순위가 저장된 map 생성
rank_map: Dict[int, int] = {}
for idx in range(len(points2)):
    num = points2[idx]

    if num not in rank_map:
        # idx는 중복 제거된 숫자의 순위를 나타냄
        # 순위는 0부터 시작
        rank_map[num] = idx
#
#
##########################################
# OUTPUT
##########################################
for p in points:
    print(rank_map[p], end=' ')

